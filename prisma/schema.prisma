// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReactionType {
  REACTION_TYPE_NONE // 0
  REACTION_TYPE_LIKE // 1
  REACTION_TYPE_RECAST // 2
}

model Cast {
  hash               String     @id @unique
  created_at         DateTime   @default(now())
  updated_at         DateTime   @default(now())
  deleted_at         DateTime?
  timestamp          DateTime?
  parent_hash        String?
  parent_url         String?
  text               String?
  fid                Int
  mentions_positions Int[]
  embedded_urls      String[]
  embedded_casts     Cast[]     @relation("CastEmbeds")
  embedded_in        Cast[]     @relation("CastEmbeds")
  parent             Cast?      @relation("CastReplies", fields: [parent_hash], references: [hash])
  author             User       @relation(name: "CastAuthor", fields: [fid], references: [fid])
  mentions           User[]     @relation("CastMentionedBy")
  reactions          Reaction[] @relation("CastLikedBy")
  replies            Cast[]     @relation("CastReplies")
}

model Reaction {
  hash        String       @id @unique
  type        ReactionType @default(REACTION_TYPE_NONE)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now())
  deleted_at  DateTime?
  timestamp   DateTime
  fid         Int
  target_hash String?
  target_url  String?
  author      User         @relation(name: "ReactionAuthor", fields: [fid], references: [fid])
  cast        Cast?        @relation(name: "CastLikedBy", fields: [target_hash], references: [hash])
}

model User {
  fid             Int               @id @unique
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now())
  deleted_at      DateTime?
  fname           String?
  pfp_url         String?
  bio             String?
  display_name    String?
  custody_address String?
  url             String?
  casts           Cast[]            @relation("CastAuthor")
  mentioned_in    Cast[]            @relation("CastMentionedBy")
  reactions       Reaction[]        @relation("ReactionAuthor")
  verifications   Verification[]
  links           Link[]            @relation("LinkAuthor")
  link_targets    Link[]            @relation("LinkTarget")
  profileUpdates  UserDataMessage[]
}

model Verification {
  hash          String    @id @unique
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  deleted_at    DateTime?
  timestamp     DateTime
  fid           Int
  address       String
  eth_signature String
  block_hash    String
  author        User      @relation(fields: [fid], references: [fid])
}

model Link {
  hash        String    @id @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  timestamp   DateTime
  type        String
  fid         Int
  target_fid  Int
  author      User      @relation(name: "LinkAuthor", fields: [fid], references: [fid])
  target_user User      @relation(name: "LinkTarget", fields: [target_fid], references: [fid])
}

model UserDataMessage {
  hash       String   @id @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  timestamp  DateTime
  type       Int
  value      String
  fid        Int
  author     User     @relation(fields: [fid], references: [fid])
}

model HubSubscription {
  url           String   @id @unique
  last_event_id BigInt
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
}
